import org.jetbrains.intellij.tasks.BuildSearchableOptionsTask

plugins {
    id 'java'
    id 'maven'
    id 'idea'
    id ('de.schablinski.activejdbc-gradle-plugin') version '1.2'
    id 'org.jetbrains.intellij' version '0.7.3'

}

group 'edu.unlv.cs.evol'
version '1.0-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
    "https://mvnrepository.com/artifact/org.jgrapht/jgrapht"
    "https://mvnrepository.com/artifact/org.mockito/mockito-core"
    maven {
        url "https://jitpack.io"
    }



}

configurations.all {
    resolutionStrategy {
        force 'org.slf4j:slf4j-api:1.7.25'
        force 'org.slf4j:slf4j-simple:1.7.25'
        force 'org.eclipse.platform:org.eclipse.core.runtime:3.20.0'
        force 'org.eclipse.platform:org.eclipse.core.contenttype:3.7.800'
        force 'org.eclipse.platform:org.eclipse.core.jobs:3.10.1000'
        force 'org.eclipse.platform:org.eclipse.core.resources:3.13.900'
        force 'org.eclipse.platform:org.eclipse.equinox.common:3.14.0'
        force 'org.eclipse.platform:org.eclipse.equinox.preferences:3.8.100'
    }
}

// SLF4J/Log4j dependency conflict resolution
configurations.all {
    exclude group: 'org.slf4j', module: 'log4j-over-slf4j'
    exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}


dependencies {
    implementation fileTree(dir: 'lib', include: ['*.jar'])
    compile group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '5.10.0.202012080955-r'
    compile group: 'com.github.tsantalis', name: 'refactoring-miner', version: '2.1.0'
    compile 'com.google.googlejavaformat:google-java-format:1.7'
    compile group: 'io.reflectoring.diffparser', name: 'diffparser', version: '1.4'
    compile 'org.eclipse.jdt:org.eclipse.jdt.core:3.24.0'
    runtimeOnly group: 'mysql', name: 'mysql-connector-java', version: '8.0.16'
    implementation group: 'org.javalite', name: 'activejdbc', version: '2.2'
    implementation group: 'org.javalite', name: 'activejdbc-instrumentation', version: '2.2'
    implementation 'org.kohsuke:github-api:1.135'
    compile 'com.github.ertugrulcetin:CommentRemover:1.2'
    compile 'commons-cli:commons-cli:1.4'
    // https://mvnrepository.com/artifact/gradle.plugin.org.jetbrains.intellij.plugins/gradle-intellij-plugin
    //compile ("gradle.plugin.org.jetbrains.intellij.plugins:gradle-intellij-plugin:0.4.3")


    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile 'org.eclipse.jdt:org.eclipse.jdt.core:3.24.0'
    testCompile group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '5.10.0.202012080955-r'
    testCompile group: 'com.github.tsantalis', name: 'refactoring-miner', version: '2.0'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.1.0'
}

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    version '2020.1.2'
    plugins 'git4idea', 'java'
  //  plugins = ['java']
}


apply plugin: 'org.jetbrains.intellij'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: "maven"


patchPluginXml {
    changeNotes """
      Add change notes here.<br>
      <em>most HTML tags may be used</em>"""
}


tasks {
    runIde {
        runIde.jvmArgs '-Djava.awt.headless=true', '-Xss100m', '-Xmx16g'
        if (project.hasProperty("mode")) {
            Object x = project.findProperty("mode")
            Object y = project.findProperty("dataPath")
            Object z = project.findProperty("evaluationProject")
            runIde.args 'integration', x.toString(), y.toString(), z.toString()
        }
        else {
            println "Use gradle runIde -Pmode=x where x= 'integration'"
        }
    }
}
tasks.withType(BuildSearchableOptionsTask).forEach { it.enabled(false) }

