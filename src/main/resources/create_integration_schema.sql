-- MySQL Script generated by MySQL Workbench
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema refactoring_aware_integration
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema refactoring_aware_integration
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `refactoring_aware_integration` DEFAULT CHARACTER SET utf8 ;
USE `refactoring_aware_integration` ;

-- -----------------------------------------------------
-- Table `refactoring_aware_integration`.`project`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `refactoring_aware_integration`.`project` ;

CREATE TABLE IF NOT EXISTS `refactoring_aware_integration`.`project` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `source_url` VARCHAR(2000) NOT NULL,
  `fork_url` VARCHAR(2000) NOT NULL,
  `source_name` VARCHAR(100) NULL,
  `fork_name` VARCHAR(100) NULL,
  `is_done` TINYINT(1) NULL DEFAULT 0,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `refactoring_aware_integration`.`patch`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `refactoring_aware_integration`.`patch` ;

CREATE TABLE IF NOT EXISTS `refactoring_aware_integration`.`patch` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `number` INT(10) NOT NULL,
   `project_id` INT NOT NULL,
   `patch_type` VARCHAR(10) NULL,
  `is_conflicting` TINYINT(1) NULL DEFAULT 0,
  `is_done` TINYINT(1) NULL DEFAULT 0,
  PRIMARY KEY (`id`, `project_id`),
  UNIQUE INDEX `number_UNIQUE` (`number` ASC),
  INDEX `fk_patches_project_idx` (`project_id` ASC),
  CONSTRAINT `fk_patches_project`
    FOREIGN KEY (`project_id`)
    REFERENCES `refactoring_aware_integration`.`project` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
    UNIQUE KEY (`project_id`, `id`))
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `refactoring_aware_integration`.`merge_commit`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `refactoring_aware_integration`.`merge_commit` ;

CREATE TABLE IF NOT EXISTS `refactoring_aware_integration`.`merge_commit` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `commit_hash` CHAR(40) NOT NULL,
  `is_conflicting` TINYINT(1) NOT NULL,
  `parent_1` CHAR(40) NOT NULL,
  `parent_2` CHAR(40) NOT NULL,
  `project_id` INT NOT NULL,
  `patch_id` INT NOT NULL,
  `is_done` TINYINT(1) NULL DEFAULT 0,
  `author_name` VARCHAR(150) NULL,
  `author_email` VARCHAR(150) NULL,
  `timestamp` LONG NULL,
  PRIMARY KEY (`id`, `project_id`, `patch_id`),
  UNIQUE INDEX `commit_hash_UNIQUE` (`commit_hash` ASC),
  INDEX `fk_merge_commit_patch_idx` (`project_id` ASC),
  CONSTRAINT `fk_merge_commit_patch`
    FOREIGN KEY (`project_id`, `patch_id`)
    REFERENCES `refactoring_aware_integration`.`patch` (`project_id`, `id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `refactoring_aware_integration`.`merge_result`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `refactoring_aware_integration`.`merge_result` ;

CREATE TABLE IF NOT EXISTS `refactoring_aware_integration`.`merge_result` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `merge_tool` VARCHAR(45) NOT NULL,
  `total_conflicting_files` INT NOT NULL,
  `total_conflicts` INT NOT NULL,
  `total_conflicting_loc` INT NOT NULL,
  `runtime` INT NOT NULL,
  `merge_commit_id` INT NOT NULL,
  `project_id` INT NOT NULL,
  `patch_id` INT NOT NULL,
  PRIMARY KEY (`id`, `merge_commit_id`, `project_id`, `patch_id`),
  INDEX `fk_merged_result_merge_commit1_idx` (`merge_commit_id` ASC, `project_id` ASC, `patch_id` ASC),
  CONSTRAINT `fk_conflicting_java_file_merge_commit1`
    FOREIGN KEY (`merge_commit_id` , `project_id`, `patch_id`)
    REFERENCES `refactoring_aware_integration`.`merge_commit` (`id` , `project_id`, `patch_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `refactoring_aware_integration`.`refactoring_conflict`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `refactoring_aware_integration`.`refactoring_conflict` ;

CREATE TABLE IF NOT EXISTS `refactoring_aware_integration`.`refactoring_conflict` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `left_old_path` VARCHAR(1000) NOT NULL,
  `right_old_path` VARCHAR(1000) NOT NULL,
  `left_new_path` VARCHAR(1000) NOT NULL,
  `right_new_path` VARCHAR(1000) NOT NULL,
  `left_refactoring_type` VARCHAR(100),
  `right_refactoring_type` VARCHAR(100),
  `left_refactoring_detail` VARCHAR(2000),
  `right_refactoring_detail` VARCHAR(2000),
  `merge_result_id` INT NOT NULL,
  `merge_commit_id` INT NOT NULL,
  `project_id` INT NOT NULL,
  `patch_id` INT NOT NULL,
  PRIMARY KEY (`id`, `merge_result_id`, `merge_commit_id`, `project_id`, `patch_id`),
  INDEX `fk_refactoring_conflict_merge_result1_idx` (`merge_result_id` ASC, `merge_commit_id` ASC, `project_id` ASC, `patch_id` ASC),
  CONSTRAINT `fk_refactoring_conflict_merge_result1`
    FOREIGN KEY (`merge_result_id` , `merge_commit_id` , `project_id`, `patch_id`)
    REFERENCES `refactoring_aware_integration`.`merge_result` (`id` , `merge_commit_id` , `project_id`, `patch_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

---- -----------------------------------------------------
---- Table `refactoring_aware_integration`.`file_statistics`
---- -----------------------------------------------------
--DROP TABLE IF EXISTS `refactoring_aware_integration`.`file_statistics` ;
--
--CREATE TABLE IF NOT EXISTS `refactoring_aware_integration`.`file_statistics` (
--  `id` INT NOT NULL AUTO_INCREMENT,
--  `merge_tool` VARCHAR(45) NOT NULL,
--  `path` VARCHAR(1000) NOT NULL,
--  `auto_merged_loc` INT NOT NULL,
--  `manual_merged_loc` INT NOT NULL,
--  `same_auto_merged_loc` INT NOT NULL,
--  `same_manual_loc` INT NOT NULL,
--  `file_precision` DOUBLE NOT NULL,
--  `file_recall` DOUBLE NOT NULL,
--  `merge_result_id` INT NOT NULL,
--  `merge_commit_id` INT NOT NULL,
--  `project_id` INT NOT NULL,
--  PRIMARY KEY (`id`, `merge_result_id`, `merge_commit_id`, `project_id`),
--  INDEX `fk_file_statistics_merge_result1_idx` (`merge_result_id` ASC, `merge_commit_id` ASC, `project_id` ASC),
--  CONSTRAINT `fk_file_statistics_merge_result1`
--    FOREIGN KEY (`merge_result_id` , `merge_commit_id` , `project_id`)
--    REFERENCES `refactoring_aware_integration`.`merge_result` (`id` , `merge_commit_id` , `project_id`)
--    ON DELETE CASCADE
--    ON UPDATE CASCADE)
--ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `refactoring_aware_integration`.`conflicting_file`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `refactoring_aware_integration`.`conflicting_file` ;

CREATE TABLE IF NOT EXISTS `refactoring_aware_integration`.`conflicting_file` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `merge_tool` VARCHAR(45) NOT NULL,
  `path` VARCHAR(1000) NOT NULL,
  `total_conflicts` INT NOT NULL,
  `total_conflicting_loc` INT NOT NULL,
  `merge_result_id` INT NOT NULL,
  `merge_commit_id` INT NOT NULL,
  `project_id` INT NOT NULL,
  `patch_id` INT NOT NULL,
  PRIMARY KEY (`id`, `merge_result_id`, `merge_commit_id`, `project_id`, `patch_id`),
  INDEX `fk_conflicting_file_merge_result1_idx` (`merge_result_id` ASC, `merge_commit_id` ASC, `project_id` ASC, `patch_id` ASC),
  CONSTRAINT `fk_conflicting_file_merge_result1`
    FOREIGN KEY (`merge_result_id` , `merge_commit_id`, `project_id`, `patch_id`)
    REFERENCES `refactoring_aware_integration`.`merge_result` (`id` , `merge_commit_id` , `project_id`, `patch_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `refactoring_aware_integration`.`conflict_block`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `refactoring_aware_integration`.`conflict_block` ;

CREATE TABLE IF NOT EXISTS `refactoring_aware_integration`.`conflict_block` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `path` VARCHAR(1000) NOT NULL,
  `conflicting_loc` INT NOT NULL,
  `start_line` INT NOT NULL,
  `end_line` INT NOT NULL,
  `merge_tool` VARCHAR(20) NOT NULL,
  `is_same` TINYINT NOT NULL,
  `is_comment` TINYINT NOT NULL,
  `conflicting_file_id` INT NOT NULL,
  `merge_result_id` INT NOT NULL,
  `merge_commit_id` INT NOT NULL,
  `project_id` INT NOT NULL,
  `patch_id` INT NOT NULL,
  PRIMARY KEY (`id`, `merge_result_id`, `merge_commit_id`, `project_id`, `conflicting_file_id`, `patch_id`),
  INDEX `fk_conflict_block_conflicting_file1_idx` (`conflicting_file_id` ASC, `merge_result_id` ASC, `merge_commit_id` ASC, `project_id` ASC, `patch_id` ASC),
  CONSTRAINT `fk_conflict_block_conflicting_file1`
    FOREIGN KEY (`conflicting_file_id` , `merge_result_id` , `merge_commit_id` , `project_id`, `patch_id`)
    REFERENCES `refactoring_aware_integration`.`conflicting_file` (`id` , `merge_result_id` , `merge_commit_id` , `project_id`, `patch_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `refactoring_aware_integration`.`refactoring`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `refactoring_aware_integration`.`refactoring` ;

CREATE TABLE IF NOT EXISTS `refactoring_aware_integration`.`refactoring` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `refactoring_type` VARCHAR(100) NULL,
  `refactoring_detail` VARCHAR(2000) NULL,
  `merge_commit_id` INT NOT NULL,
  `project_id` INT NOT NULL,
  `patch_id` INT NOT NULL,
  PRIMARY KEY (`id`, `merge_commit_id`, `project_id`, `patch_id`),
  INDEX `fk_refactoring_merge_commit1_idx` (`merge_commit_id` ASC, `project_id` ASC, `patch_id` ASC),
  CONSTRAINT `fk_refactoring_merge_commit1`
    FOREIGN KEY (`merge_commit_id` , `project_id`, `patch_id`)
    REFERENCES `refactoring_aware_integration`.`merge_commit` (`id` , `project_id`, `patch_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
